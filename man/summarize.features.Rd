% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/summarize_features.R
\name{summarize.features}
\alias{summarize.features}
\title{Summarize features}
\usage{
summarize.features(siamcat, level = 'g__',
                    feature.type='original', verbose=1)
}
\arguments{
\item{siamcat}{object of class \link{siamcat-class}}

\item{level}{string, at which level to summarize (e.g. \code{g__} = genus)}

\item{feature.type}{string, on which type of features should the function
work? Can be either \code{"original"}, \code{"filtered"}, or
\code{"normalized"}. Please only change this paramter if you know what
you are doing!}

\item{verbose}{integer, control output: \code{0} for no output at all,
\code{1} for only information about progress and success, \code{2} for
normal level of information and \code{3} for full debug information,
defaults to \code{1}}
}
\value{
object of class \link{siamcat-class} with a summarized feature table
}
\description{
This function summarize features on a specific taxonomic level
}
\details{
This function will summarize features at different taxonomic
levels, e.g. transform species-level relative abundance into genus-level
taxonomic profiles.

The function expects feature names which encode taxonomic information, e.g.

\code{k__Bacteria;p__Actinobacteria;c__Actinobacteria;o__Acidimicrobiales;..}

Then, for a given taxonomic level (e.g. \code{g__}), the function will
sum up all the relative abundances of features belonging to the same group
at that specific taxonomic level.

\strong{Please note that this function is currently maturing and not
necessarily reliable!!!}
}
\examples{
## load the phyloseq example data
data("GlobalPatterns")
feat <- otu_table(GlobalPatterns)[1:500,]
label <- create.label(meta=sample_data(GlobalPatterns),
    label = "SampleType",
    case = c("Freshwater", "Freshwater (creek)", "Ocean"))
# rename features to create feature names containing taxonomic information
temp <- tax_table(GlobalPatterns)[1:500,]
test <- apply(temp, 1, FUN=function(vec){
    out <- ''
    for (i in seq_along(vec)){
        end <- ifelse(i == ncol(temp), '', ';')
        x <- colnames(temp)[i]
        x2 <- tolower(substr(x, 1, 1))
        out <- paste0(out, x2, '__', vec[i], end)
    }
    return(out)})
rownames(feat) <- test
# run the constructor function
siamcat <- siamcat(feat=feat, label=label, verbose=1)
siamcat <- summarize.features(siamcat, level='g__', verbose=3)
}
\keyword{internal}
